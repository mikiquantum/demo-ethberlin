stages:
  - checks
  - security
  - migrate_test
  - build_sources_review
  - build_docker_review
  - review
  - cleanup
  - migrate_staging
  - build_sources_staging
  - build_docker_staging
  - deploy_staging

cache:
  paths:
    - node_modules/
    - client/node_modules/

check_dummy:
  stage: checks
  image: node:9.11
  variables:
    ABCD: "HEY"
    PROVIDER_ENDPOINT: "${PROVIDER_TEST_ENDPOINT}"
  script:
    - echo "A${ABCD}Z"
    - echo "A${PROVIDER_TEST_ENDPOINT}Z"
    - echo "A${PROVIDER_ENDPOINT}Z"

check_test:
  stage: checks
  image: node:9.11
  before_script:
    - npm install
    - cd client && npm install && cd ../
    - npm install -g truffle@4.1.13
    - npm install -g ganache-cli@6.1.6
  script:
    - echo "Running truffle tests"
    - truffle compile
    - npm run ganache > /dev/null 2>&1 &
    - sleep 5
    - truffle migrate --network ganache
    - npm run test
    - pkill -f ganache-cli
    - cd client && npm run test && cd ../
  except:
    - master

check_coverage:
  stage: checks
  image: node:9.11
  script:
    - echo "Running test coverage"
  except:
    - master

check_linter:
  stage: checks
  image: node:9.11
  cache: {}
  before_script:
    - npm install -g solhint
  script:
    - echo "Running solidity linter"
    - solhint "contracts/**/*.sol"
  except:
    - master

check_security:
  stage: security
  image: docker:stable
  cache: {}
  services:
    - docker:dind
  script:
    - docker run -v $(pwd):/tmp -w "/tmp/" mythril/myth --truffle
  dependencies:
    - check_test
  except:
    - master

migrate_test:
  stage: migrate_test
  image: node:9.11
  cache: {}
  before_script:
    - npm install
    - npm install -g truffle@4.1.13
  script:
    - export PROVIDER_ENDPOINT=$PROVIDER_TEST_ENDPOINT
    - export ETH_ACCOUNT=$ETH_TEST_ACCOUNT
    - truffle migrate --network test
  artifacts:
    paths:
      - build/
  except:
    - master

build_sources_review:
  stage: build_sources_review
  image: node:9.11
  script:
    - npm run build
  dependencies:
    - migrate_test
  artifacts:
    paths:
      - build_webpack/
  except:
    - master

build_docker_review:
  stage: build_docker_review
  image: docker:stable
  cache: {}
  services:
    - docker:dind
  dependencies:
    - build_sources_review
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build -t registry.gitlab.com/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG .
    - docker push registry.gitlab.com/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG
  except:
    - master

review:
  stage: review
  image: roffe/kubectl
  script:
    - setup_kubernetes
    - deploy
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.$PROJECT_DOMAIN
    on_stop: stop_review
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master

stop_review:
  stage: cleanup
  image: roffe/kubectl
  variables:
    GIT_STRATEGY: none
  script:
    - setup_kubernetes
    - delete
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master

migrate_staging:
  stage: migrate_staging
  image: node:9.11
  before_script:
    - npm install
    - npm install -g truffle@4.1.13
  script:
    - truffle migrate --network staging
  artifacts:
    paths:
      - build/
  when: manual
  only:
    refs:
      - master

build_sources_staging:
  stage: build_sources_staging
  image: node:9.11
  script:
    - npm run build
  dependencies:
    - migrate_staging
  only:
    refs:
      - master
  artifacts:
    paths:
      - build_webpack/

build_docker_staging:
  stage: build_docker_staging
  image: docker:stable
  cache: {}
  services:
    - docker:dind
  dependencies:
    - build_sources_staging
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build -t registry.gitlab.com/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG .
    - docker push registry.gitlab.com/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG
  only:
    refs:
      - master

deploy_staging:
  stage: deploy_staging
  image: roffe/kubectl
  script:
    - setup_kubernetes
    - deploy
  environment:
    name: staging
    url: http://staging.$PROJECT_DOMAIN
  only:
    refs:
      - master
    kubernetes: active


# ---------------------------------------------------------------------------
.auto_devops: &auto_devops |
  export DEPLOYMENT_DOMAIN=$(echo $CI_ENVIRONMENT_URL | awk -F/ '{print $3}')

  # Deployment-related variables and functions
  function setup_kubernetes() {
    kubectl config set-cluster "$CI_PROJECT_ID" --server="$KUBE_URL" --certificate-authority="$KUBE_CA_PEM_FILE"
    kubectl config set-credentials "$CI_PROJECT_ID" --token="$KUBE_TOKEN"
    kubectl create namespace "$KUBE_NAMESPACE" -o yaml --dry-run | kubectl apply -f -
    kubectl config set-context "$CI_PROJECT_ID" --cluster="$CI_PROJECT_ID" --user="$CI_PROJECT_ID" --namespace="$KUBE_NAMESPACE"
    kubectl config use-context "$CI_PROJECT_ID"
    kubectl create secret docker-registry registry.gitlab.com --docker-server="$CI_REGISTRY" --docker-username="$CI_REGISTRY_USER" --docker-password="$CI_REGISTRY_PASSWORD" -o yaml --dry-run | kubectl apply -f -
  }

  function deploy() {
    cat ./deployment.template.yml | envsubst | kubectl apply -f -
  }

  function delete() {
    cat ./deployment.template.yml | envsubst | kubectl delete -f -
  }

before_script:
  - *auto_devops
